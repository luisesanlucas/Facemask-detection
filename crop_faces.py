"""
crop_faces.py

Created: 04/22/21
Modified: 05/04/21 By: Sam

This file digests XML files from the mask image dataset and uses them to locate and
extract human faces from images. It then saves the faces as separate images. It runs
on relative paths, so should be located in the same folder as images and annotation
folders.
"""

# Built-in python packages
import os
import xml.etree.ElementTree as ET
# Python Imaging Library - "pip install --upgrade Pillow"
from PIL import Image
import cv2
import dlib
import imutils


def find_and_crop():
    """This function tries to do the same as the one below but using its own bounding
    boxes generated by the openCV library."""
    img_path = './new_unclass_images/'
    detector = dlib.cnn_face_detection_model_v1('./mmod_human_face_detector.dat')
    for file in list(sorted(os.listdir(img_path))):
        # From https://www.kaggle.com/nageshsingh/
        # mask-and-social-distancing-detection-using-vgg19
        # https://www.pyimagesearch.com/2021/04/19/face-detection-with-dlib-hog-and-cnn/
        # and
        # http://dlib.net/cnn_face_detector.py.html in pieces from each and additional
        # reading
        img = cv2.imread(img_path + file)
        img = imutils.resize(img, width=600)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        boxes = detector(img, 1)
        for i, d in enumerate(boxes):
            if d.confidence > 0.6:
                # Use the bounding box to crop and save detected faces
                print("Detection # {}: Left: {} Top: {} Right: {} Bottom: {} Confidence: {}".format(
                    i, d.rect.left(), d.rect.top(), d.rect.right(), d.rect.bottom(), d.confidence
                ))
                crop = (Image.fromarray(img)).crop((d.rect.left(), d.rect.top(), d.rect.right(), d.rect.bottom()))
                crop.save('./cv_gen_faces/' + file[:-4] + '-' + str(i) + '.png', format='png')


def crop_faces():
    """This just crops faces out of the dataset from a filesystem and saves them as
    separate images. Not strictly necessary, but enables direct feeding of faces
    into a NN."""
    xml_path = './archive/annotations/'
    img_path = './archive/images/'
    xml_files = list(sorted(os.listdir(xml_path)))
    for file in xml_files:
        name = file[:-4]
        img = Image.open(img_path + name + '.png')
        tree = ET.parse(xml_path + file)
        root = tree.getroot()
        i = 0
        for box in root.iter('bndbox'):
            # Crop needs left, top, right, bottom (clockwise), box has two corners
            # box[0] - top left x val, box[1] - top left y val, others opposite
            crop = img.crop(
                (int(box[0].text), int(box[1].text), int(box[2].text), int(box[3].text))
            )
            print(crop)
            # The dash is necessary to avoid overwrites for common first characters
            crop.save('./faces/' + name + '-' + str(i) + '.png', format='png')
            i += 1


find_and_crop()
